
(* minimal list library *)

datatype a list = Nil of unit | :: of a * list

infixr ::

fun list-rev l =
    let
        fun revv (Nil (), acc) = acc
          | revv (h::t, acc) = revv (t, h::acc)
    in
        revv (l, Nil ())
    end

fun @ (h::t, l2) = h :: @(t, l2)
  | @ (nil, l2) = l2

infixr @

fun list-eq _ (Nil (), Nil ()) = true ()
  | list-eq f (a :: at, b :: bt) = 
    if f (a, b)
    then list-eq f (at, bt)
    else false()
  | list-eq _ _ = false ()

fun list-map f (Nil ()) = Nil ()
  | list-map f (h :: t) = f h :: list-map f t

fun list-length l =
    let
        fun ll (Nil (), acc) = acc
          | ll (_ :: t, acc) = ll (t, acc + 1)
    in
        ll (l, 0)
    end

fun list-foldr f b =
    let
        fun fr (h::t) = f(h, fr t)
          | fr (Nil ()) = b
    in
        fr
    end

fun list-foldl f b l =
    let
        fun fl (x, Nil ()) = x
          | fl (x, h :: t) = fl(f(h, x), t)
    in
        fl (b, l)
    end

fun list-concat ll = list-foldr op@ (Nil ()) ll

fun list-filter f =
    let
        fun fi (Nil ()) = Nil ()
          | fi (h :: t) = if f h 
                          then f :: fi t
                          else fi t
    in
        fi
    end

fun list-exists f =
    let
        fun ex (Nil ()) = false ()
          | ex (h :: t) = if f h 
                          then true ()
                          else ex t
    in
        ex
    end

fun list-all f =
    let
        fun al (Nil ()) = true ()
          | al (h :: t) = if f h
                          then al t
                          else false ()
    in
        al
    end

fun list-tabulate (i, f) =
    let
        fun go n =
            if n < i
            then f n :: go (n + 1)
            else Nil ()
    in
        go 0
    end

val length = list-length
val rev = list-rev
val map = list-map
val foldr = list-foldr
val foldl = list-foldl
