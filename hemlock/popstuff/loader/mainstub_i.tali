; TAL INTERFACE mainstub_i
; This file was generated by TALC
	TYPE	<?arr = fn c:T . Exist[?sz:Sint].^*[S(?sz)^r,(^*[array(?sz,c^rw)])^r]>
	TYPE	<?str = Exist[?sz:Sint].^*[S(?sz)^r,(^*[array(?sz,B1^rw)])^r]>
	TYPE	<?exnname = fn c$0:Tm . ^T^rw(c$0)*[B4^rw]>
	TYPE	<?exn = Exist[c$0:Tm].^*[(?exnname c$0)^r,?str^r,c$0]>
	TYPE	<?H = fn s:Ts e:Tcap . code {cap: e,EAX: ?exn,ESP: sptr s}>
	TYPE	<?E = fn s:Ts e:Tcap . (?H s e)::s>
	TYPE	<?Ha = fn ?s1:Ts ?s2:Ts ?e1:Tcap ?e2:Tcap . (sptr (?E ?s2 ?e2))::(?s1#(?E ?s2 ?e2))>
	TYPE	<?S = fn ?ret:T4 ?sp:Ts ?s1:Ts ?s2:Ts ?e1:Tcap ?e2:Tcap . (code {cap: &[?e1,?e2],EAX: ?ret,EBP: sptr (?E ?s2 ?e2),ESP: sptr (?sp#?s1)#(?E ?s2 ?e2)})::(?sp#?s1)>
	TYPE	<?Sv = fn ?sp:Ts ?s1:Ts ?s2:Ts ?e1:Tcap ?e2:Tcap . (code {cap: &[?e1,?e2],EBP: sptr (?E ?s2 ?e2),ESP: sptr (?sp#?s1)#(?E ?s2 ?e2)})::(?sp#?s1)>
	TYPE	<?Sf = fn ?sp:Ts ?s1:Ts ?s2:Ts ?e1:Tcap ?e2:Tcap . (code {cap: &[?e1,?e2],ST0,EBP: sptr (?E ?s2 ?e2),ESP: sptr (?sp#?s1)#(?E ?s2 ?e2)})::(?sp#?s1)>
	TYPE	<?Ss = fn ?ret:T4 ?sp:Ts ?s1:Ts ?s2:Ts ?e1:Tcap ?e2:Tcap . (code {cap: &[?e1,?e2],EAX: ?ret,EBP: sptr (?E ?s2 ?e2),ESP: sptr ?s1#(?E ?s2 ?e2)})::(?sp#?s1)>
	TYPE	<?Ssv = fn ?sp:Ts ?s1:Ts ?s2:Ts ?e1:Tcap ?e2:Tcap . (code {cap: &[?e1,?e2],EBP: sptr (?E ?s2 ?e2),ESP: sptr ?s1#(?E ?s2 ?e2)})::(?sp#?s1)>
	TYPE	<?Ssf = fn ?sp:Ts ?s1:Ts ?s2:Ts ?e1:Tcap ?e2:Tcap . (code {cap: &[?e1,?e2],ST0,EBP: sptr (?E ?s2 ?e2),ESP: sptr ?s1#(?E ?s2 ?e2)})::(?sp#?s1)>

	TYPE <?hemcodex = fn ttta:T4 tregs:T4 vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap . code {cap: &[e1,e2],EBX : tregs, ECX: tregs, EDX : tregs, ESI: tregs, EDI: tregs, EBP: sptr (?E s2 e2),ESP: sptr ttta::(?S vanswer ?str::?str::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::vdlis::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdlis vdep::vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ?str ?str::vdep::(^T[0,1])::se s1 s2 e1 e2)#(?E s2 e2)})::se s1 s2 e1 e2)#(?E s2 e2)}>

        TYPE <ttt : T4 = ^+[*[S(1)^r, B4^r],*[S(2)^r, ?str^r],*[S(4)^r, `ttt^r],*[S(5)^r, B4^r, `ttt^r],*[S(6)^r, (?arr ` ttt)^r],*[S(3)^r, (All [vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap] . (?hemcodex (`ttt) (`ttt) vanswer vdep vdlis s1 s2 e1 e2))^r]]>

	TYPE <?hemcode = fn vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap . ?hemcodex (`ttt) (`ttt) vanswer vdep vdlis s1 s2 e1 e2>

;; (All[s:Ts e:Tcap] . code { cap : e, EBP : sptr (`ttt :: (code {cap: e, EAX: B4, EBP: sptr s, ESP: sptr s}) :: s), ESP : sptr (`ttt :: (code {cap: e, EAX: B4, EBP: sptr s, ESP: sptr s}) :: s), EBX: `ttt, ECX: `ttt, EDX: `ttt, ESI: `ttt, EDI: `ttt })

	VAL	_tal_exit,<All[s1:Ts].code {ESP: sptr B4::s1}>
	VAL	_NullPointer_pkt,<^*[?exn^rw]>
	VAL	_UnionVariant_pkt,<^*[?exn^rw]>
	VAL	_ArrayBounds_pkt,<^*[?exn^rw]>
