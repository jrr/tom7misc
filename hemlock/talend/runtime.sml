
(* functions that will be available to the TAL runtime *)

structure TALRun =
struct

  datatype basetype = datatype Runtime.basetype

  val fns = map #2 Runtime.fns

  val itos = Int.toString

  fun poptype s BINT = "int " ^ s
    | poptype s BSTRING = "string " ^ s
    | poptype s BSTRINGVEC ="string " ^ s ^ "[]"

  fun popfun (cod, dom) =
      (case cod of
           NONE => (fn s => "void " ^ s)
         | SOME t => (fn s => poptype s t))
           (" f(" ^ StringUtil.delimit "," (map (poptype "") dom) ^ ")")

  (* creates runtime/main/rinit.pop *)
  (* XXX should really generate this in tmp with random filename. *)
  fun build out entry ff =
      let
          val _ = Posix.FileSys.unlink ff handle _ => ()
          val f = TextIO.openOut ff
          fun wr s =
              let in
                  TextIO.output(f, s);
                  TextIO.output(f, "\n")
              end

          fun one (name, dom, cod, sym, s) =
              let

              in
                  (* declare type *)
                  wr ("extern ?struct " ^ s ^ " {");
                  wr ("   " ^ popfun (cod, dom) ^ ";");
                  wr "}";
                  wr "";
                  wr ("extern " ^ s ^ " " ^ name ^ ";")
              end

          fun two (name, dom, cod, sym, s) =
              wr ("  " ^ name ^ " = new " ^ s ^ "(" ^ sym ^ ");")

          val argtomain = TALMarshall.entry entry

          fun initstring sv s n =
              if n >= size s then ()
              else 
                  let in
                      wr ("  " ^ sv ^ "[" ^ itos n ^ "] = " ^ 
                          itos (ord (CharVector.sub(s, n))) ^ ";");
                      initstring sv s (n + 1)
                  end

      in
          wr " /* Runtime initializer. */ ";
          wr (" /* Generated by Hemlock (talend/runtime.sml) " ^
              "-- Do not edit!! */");

          wr "";

          wr "#include <core.h>";
          wr "#include <hemrunt.h>";
          wr "#include \"poprunt.h\"";

          wr "";

          (* argument that the client should supply to main in order
             to invoke the entry function *)
          wr ("string arg_to_main;");
          wr "";

          (* the name of the cord code packaged up *)
          wr ("string cordcode = \"" ^ out ^ ".tar.gz\";");
          wr "";

          (* declarations *)
          app one fns;

          (* initialization *)
          wr "";
          wr "void init_runtime () {";

          wr ("  arg_to_main = Core::new_string(" ^ 
              itos (size argtomain) ^ ");");
          initstring "arg_to_main" argtomain 0;

          wr "";

          app two fns;
          wr "  return;";
          wr "}";

          TextIO.closeOut f
      end

end