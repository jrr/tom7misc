The CIL language  is typed, with one important use  of this being that
we determine  the calling convention  for a function pointer  from its
type. (This includes the size of  the return address slot, which is on
the locals stack and shared between  the caller and callee, as well as
the number and  sizes of the arguments, also on  the locals stack.) We
make  the representation  (Word8,  Word16, Word32)  of integral  types
explicit, but  signed and unsigned  ints are represented the  same way
(just as on  the processor itself). Instead,  expressions like Promote
(which converts  e.g. an  8-bit word  to a  16-bit word)  are explicit
about  whether  they  perform  sign   extension.  We  are  careful  to
distinguish  between  8-, 16-  and  32-bit  quantities throughout  the
compiler, because printable x86 has the ability to work with all three
widths, and we can produce significantly better code if we can use the
correct width.  (As a simple  example, loading  a 16-bit word  is much
cheaper than the zero-extended 32-bit version.)

Some low-level ideas are threaded throughout the compiler. In the case
of  "out8"  and  "exit",  for  example, these  are  available  to  the
programmer if she simply declares them:

     int _out8(int, int);
     int _exit(int);

They can  be called like _exit(1),  but are translated to  the Builtin
expression rather  than a function call.  It is not permitted  to take
their addresses.

Unlike LLVMNOP, we have both  expression forms of operators and "cond"
forms. The expression forms evaluate to 1 or 0, whereas the cond forms
are only used  as a combined test-and-branch in  the GotoIf construct.
Optimizations try to put these in the most useful form for later work.


    ** 24. Optimization **

CIL code  is optimized  via a  series of  conservative transformations
until   no  more   simplifications  are   possible.  Among   important
optimizations are  dead variable  removal and constant  folding, which
clean up  the code generated  by the translation  from C to  CIL. Lots
more is  possible here, but since  these problems are not  specific to
printable x86,  I did not  spend that  much time on  optimization. The
main thing is to keep the code  size for the programs we want to write
under the 64k  limit. There is a natural  tension between implementing
optimizations for  the "high-level" CIL  language (which is  easier to
analyze) and the low-level  LLVMNOP language (more flexibility, access
to incidental  tricks that  don't make  sense at  the high  level, and
opportunity to clean up after more of the compiler's work).

Optimizations are implemented using  the "Pass" functor idea presented
in my Ph.D. dissertation [MTMC'08].

The  optimization  phase  is  also responsible  for  eliminating  some
features from the  language so that we don't need  to think about them
when converting to LLVMNOP:

 - Multiplication. In printable x86, we have access to the IMUL
   instruction, but only versions that multiply by a constant
   immediate value (opcodes 0x6B, 0x69). Since that immediate needs to
   be printable, this instruction is not very useful -- we can't even
   use it to implement multiplication by arbitrary constants. Instead,
   the "Optimization" phase for CIL replaces the Times expression with
   a function call to a built-in hand-written routine that implements
   multiplication by repeated addition.

 - Comparison ops. Expressions like LessEq are transformed into
   GotoIf(cond, ...), since we don't have any way of comparing values
   without also branching.

 - String literals. These are replaced with references to
   globally-allocated arrays.

 - Global initialization. All initialization code for globals (e.g.
   int global = 15;) is moved into a wrapper around the main function.

These  tasks  aren't really  optimizations,  but  we want  to  perform
optimization both  before and after  doing them. So  optimization code
needs to at least be aware of  their existence so that it doesn't e.g.
reintroduce string literals after they have been eliminated!


    ** 25. Converting to CIL **

The frontend of the compiler uses  the ckit library [CKIT'00] to parse
the input C code into an ML datatype called "AST." The details of this
language  are  mostly  uninteresting,  but  it  is  mostly  in  direct
correspondence  to C89  itself.  When  we convert  to  CIL, we  remove
"syntactic sugar" constructs  that can be built  from more fundamental
things. "For"  example, a for loop  is broken apart into  a few gotos.
The && and || operators  make their short-circuiting behavior explicit
by sequencing the tests. Implicit widening and narrowing between types
is made explicit. Compound assignment ops like ^= and ++ are sequenced
into the primitives that make  them up. Array subscripts and structure
references are  converted into pointer arithmetic.  Although there's a
lot of code involved to implement C, it is mostly standard.


    ** 26. Limitations **

ABC has  some limitations, some of  which are fundamental and  some of
which are simply due to the unconscionably strict SIGBOVIK deadlines:

 - Floating point is not available. We have access to none of the
   floating point instructions, so native support is not really
   possible. It would be possible to provide software implementations
   of the floating-point operations; prior to the Intel 80486, support
   for floating point was usually provided in software anyway, so
   this helps us avoid anachronism.

 - Standard libraries are not available. Since we can only call the
   DOS INT 0x21 handler one time, and we use that to exit, there is
   no way to access the filesystem or write to the console. One could
   conceivably write their own device drivers using I/O ports (see
   the next section), but this usually also involves using or
   implementing hardware interrupts, so probably wouldn't pan out.

 - malloc/free. This can be supported in software, with no
   significant limitations other than the amount of memory available.

 - Operand widths. Though ABC architecturally supports most operations
   at 8, 16, and 32 bit widths, most operations are only implemented
   for 16 bit operands. This is easily fixed, but should be done with
   some care to correctness and performance.
   
 - Performance. Multiplication is linear time, since we use a software
   routine. This can be done (somewhat) better, but will always involve
   loops in the general case. Other constructs like "if" and "while"
   can have unexpectedly bad performance due to the "ladder" technique
   for control flow; these issues can make algorithms perform
   asymptotically worse than they should.
   
 - Division and modulus. These need to be done in software like
   multiplication, which is trickier than usual due to the lack of
   efficient bit shifts. Note that many computer processors don't even
   have an integer division instruction (e.g. Alpha, 6502), so this is
   not even that weird.
   
 - struct copying. Not a huge deal, but it means emitting code that
   copies struct field-by-field because we don't have anything like
   memcpy, and around the time of a function call or return, the
   state of the machine is pretty delicate.

 - sizeof. Actually sizeof is so easy I just went and implemented
   it just now, instead of writing this sentence. I saved further
   time by not deleting the previous sentence.
   
 - Bit fields. These are garbage so nobody implements them unless
   they have to. No fundamental limitation here, although the
   compiler does assume that lvalues have an address.


I am  shamed that ABC does  not compile the complete  feasible subset.
Perhaps check  http://tom7.org/abc/ for an updated  version, published
postpartum.


    ** 27. Programming **

Since we're working in reverse order,  we've reached the very front of
the ABC compiler, and now can talk about the program we feed to it.

Obviously the program  that is this paper should do  something, but so
far we've  only talked  about how  to do  loops and  exit. We  do have
access to  the command  line via  the PSP  (properly piped  through to
argv), and we  do have the possibility of looping  forever, or exiting
with some  status. These would  at least demonstrate  computation, but
are pretty lame, let's be honest.

A natural thing to do when  thinking about "printable x86" would be to
have the  paper print itself out,  i.e., a quine. This  would be quite
challenging given  the ratio of  accessible data (64kb data  segment +
data embedded  in the  64k of code)  to the size  of the  paper itself
(409k), but it might be possible. Sadly, the major obstacle is that we
cannot repeatedly invoke INT 21, so we cannot print anything out.

Like some kind of miracle, though,  two of the opcodes available to us
in  printable x86  are  practically made  for I/O.  In  fact they  are
literally made  for I/O,  and in  fact their names  are INS  and OUTS.
These are  part of  a family  of CPU  instructions that  interact with
peripherals on  the motherboard. DOS  uses these to implement  some of
its  INT 21  system calls  (e.g., to  talk to  the disk  controller to
implement the file  system), but I/O ports are sometimes  also used by
application programmers.

In this case, there is one nice  piece of hardware that is standard on
DOS-era computers,  and that  grabbed a standard  set of  port numbers
before  the concept  of  configuring I/O  was a  thing:  The Adlib  FM
synthesis card.  By writing bytes to  various ports, we can  make this
thing make stupid sounds.

The out8 primitive I've mentioned a few times provides a way for the C
programmer to access the OUTS  instruction. OUTS is actually a routine
intended for  writing a whole  string to an I/O  port, but we  can set
things up so  that it just writes one byte.  We temporarily locate the
string at offset DS:0000, i.e., what the "null pointer" points to, for
efficiency   and  to   avoid  interfering   with  any   program  data.
Incidentally,  this also  gives us  style  points for  using the  rare
instruction

     AND [SI] <- SI

which bitwise-ands  an address  into the thing  the address  points to
(!), because we know SI is 0.

 ... Oh wait, here comes the code segment!
