;; TAL implementation: /tmp/hemlock4dcb
;; generated by Hemlock -- do not edit!
	
	INCLUDE TAL.INC
	_begin_TAL
	
	TAL_IMPORT /tmp/circular_i.tali
	
	TAL_EXPORT /tmp/circular_e.tali
	

	CODE


__hemlock_main:
;; exported
LABELTYPE <All[vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap] . (?hemcode vanswer vdep vdlis s1 s2 e1 e2)>
	PUSH ECX
	PUSH EDX
;; make ref contents
	MALLOC cont, 8
	MOV DWORD PTR [EAX], 1 ;; int
	MOV DWORD PTR [EAX + 4], subsume(<B4>, 80)
	FORGETUNIQUE cont
	COERCE rollsum(<`ttt>, forgetname(EAX))
	MOV EBX, EAX

;; make ref
	MALLOC small, 8
	MOV DWORD PTR [EAX], 4 ;; ref
	MOV DWORD PTR [EAX + 4], EBX
	FORGETUNIQUE small
	COERCE rollsum(<`ttt>, forgetname(EAX))


	POP EDX
	POP ECX

;; try to change it: ref to self

	MOV EBX, EAX
	MOV EDX, EAX
	COERCE unroll(EBX)
	NAMEOBJ check, EBX
	MOV EAX, [EBX]
	CMP EAX, 4 ;; string
	JNE hemlock_runtime_error   ;; wrong tag
;	MOV EAX, [rec(forgetname(EBX))+4]
	MOV [rec(forgetname(EBX))+4], EDX
	REMOVENAME check

	JMP tapp(primop_unimplemented, <vanswer, vdep, vdlis, s1, s2, e1, e2>)

;; entry point for cords and client
_main_function:
LABELTYPE<All[vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::?str::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ?str B4::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::vdlis::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdlis vdep::vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ?str ?str::vdep::(^T[0,1])::se s1 s2 e1 e2)#(?E s2 e2)})::se s1 s2 e1 e2)#(?E s2 e2)}>
	;; XXX FIXME  should load default exception handler!
	;; (we need some ttt there, so let's just put the int 32767 for now)
	MALLOC def_exn_handler__, 8
	MOV DWORD PTR [EAX], 1
	MOV DWORD PTR [EAX + 4], subsume(<B4>, 32767)
	FORGETUNIQUE def_exn_handler__
	COERCE rollsum(<`ttt>, forgetname(EAX))
	PUSH EAX
	
	;; put dummy ttt in each
	MOV EBX, EAX
	MOV ECX, EAX
	MOV EDX, EAX
	MOV ESI, EAX
	MOV EDI, EAX
	
	;; note .. though we have pushed a ttt onto s1, hemcode knows this,
	;; so we don't need to pass it in here.
	JMP tapp(__hemlock_main, <vanswer, vdep, vdlis, s1, s2, e1, e2>)
	

;; handlers for runtime errors
primop_unimplemented:
LABELTYPE <All[vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap] . (?hemcodex (`ttt) (junk4) vanswer vdep vdlis s1 s2 e1 e2)>
	JMP hemlock_runtime_error

hemlock_runtime_error:
	MOV EAX,DWORD PTR [_NullPointer_pkt]
	FINIT
	MOV ESP,EBP
	POP EBX
	JMP EBX
_dyninit_main:
LABELTYPE <All[vb:T4 vc:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::?str::(^*[Rep(type va)])::se s1 s2 e1 e2)#(?E s2 e2)})::vb::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv vc::?str::(^*[Rep(type va)])::va::se s1 s2 e1 e2)#(?E s2 e2)})::vc::(^T[0,1])::se s1 s2 e1 e2)#(?E s2 e2)}>

MOV  EAX,DWORD PTR [_looked_up_old]
CMP  EAX,1
JE  iffalse$7
iftrue$6:
MOV  EAX,sum(<^T[0,1]>,1)
MOV  DWORD PTR [_looked_up_old],EAX
MOV  EAX,[ESP+20]
CMP  EAX,0
JE  iffalse$10
iftrue$9:
RETN
iffalse$10:
FALLTHRU  <vb,vc,s1,s2,e1,e2>
tc_fast$12:
LABELTYPE <All[vb:T4 vc:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::?str::(^*[Rep(type va)])::se s1 s2 e1 e2)#(?E s2 e2)})::vb::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv vc::?str::(^*[Rep(type va)])::va::se s1 s2 e1 e2)#(?E s2 e2)})::vc::(^T[0,1])::se s1 s2 e1 e2)#(?E s2 e2)}>
ifend$11:
JMP  ifend$8
iffalse$7:
FALLTHRU  <vb,vc,s1,s2,e1,e2>
tc_fast$13:
LABELTYPE <All[vb:T4 vc:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::?str::(^*[Rep(type va)])::se s1 s2 e1 e2)#(?E s2 e2)})::vb::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv vc::?str::(^*[Rep(type va)])::va::se s1 s2 e1 e2)#(?E s2 e2)})::vc::(^T[0,1])::se s1 s2 e1 e2)#(?E s2 e2)}>
ifend$8:
MOV  EAX,DWORD PTR [_is_updated]
CMP  EAX,1
JE  iffalse$15
iftrue$14:
MOV  EAX,sum(<^T[0,1]>,1)
MOV  DWORD PTR [_is_updated],EAX
PUSH  _main_function
PUSH  type_of_mainfn
PUSH  name_of_mainfn
PUSH  DWORD PTR [ESP+28]
MOV  EAX,[ESP+28]
CALL  tapp(EAX,<All[vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::?str::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ?str B4::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::vdlis::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdlis vdep::vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ?str ?str::vdep::(^T[0,1])::se s1 s2 e1 e2)#(?E s2 e2)})::se s1 s2 e1 e2)#(?E s2 e2)},ESP 4 10 s1,EBP 1,e1,e2>)
ADD  ESP,16
JMP  ifend$16
iffalse$15:
FALLTHRU  <vb,vc,s1,s2,e1,e2>
tc_fast$20:
LABELTYPE <All[vb:T4 vc:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::?str::(^*[Rep(type va)])::se s1 s2 e1 e2)#(?E s2 e2)})::vb::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv vc::?str::(^*[Rep(type va)])::va::se s1 s2 e1 e2)#(?E s2 e2)})::vc::(^T[0,1])::se s1 s2 e1 e2)#(?E s2 e2)}>
ifend$16:
RETN

DATA

string_Hello_2C_2__1:
COERCE pack(<14>,?,<?str>)
	DD 14
	DD data_string_Hello_2C_2__1

data_string_Hello_2C_2__1:
LABELTYPE <^*[array(14,B1^rw)]>
COERCE array(0,0,<B1^rw>,?)
	DB 72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33, 10

;; dyninit data
nom_data:
LABELTYPE <^*[array(13,B1^rw)]>
COERCE  array(0,0,<B1^rw>,?)
DB  "main_function"
name_of_mainfn:
COERCE  pack(<13>,?,<?str>)
DD  13
DD  nom_data
type_of_mainfn:
LABELTYPE <^*[Rep(type All[vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::?str::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ?str B4::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::vdlis::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdlis vdep::vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ?str ?str::vdep::(^T[0,1])::se s1 s2 e1 e2)#(?E s2 e2)})::se s1 s2 e1 e2)#(?E s2 e2)})]>
DREP  TYPE  All[vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::?str::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ?str B4::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdep vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::vdlis::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vdlis vdep::vdlis::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vanswer ?str::se s1 s2 e1 e2)#(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ?str ?str::vdep::(^T[0,1])::se s1 s2 e1 e2)#(?E s2 e2)})::se s1 s2 e1 e2)#(?E s2 e2)}

_looked_up_old:
LABELTYPE <^*[(^T[0,1])^rw]>
DD  sum(<^T[0,1]>,0)
_is_updated:
LABELTYPE <^*[(^T[0,1])^rw]>
DD  sum(<^T[0,1]>,0)

;; runtime functions for client

TYPE <writet? : T4 = ^T(0)`writet?mem>
TYPE <writet?mem : Tm 4 = *[(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S B4 B4::?str::se s1 s2 e1 e2)#(?E s2 e2)})^rw]>

_h_write:
LABELTYPE <^*[`writet?^rw]>
   DD  rollsum(<`writet?>, 0)
;; code table
ctab_data__8:
LABELTYPE <^*[array(1,(All[vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap] . (?hemcode vanswer vdep vdlis s1 s2 e1 e2))^rw)]>
COERCE array(0, 0, <(All[vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap] . (?hemcode vanswer vdep vdlis s1 s2 e1 e2))^rw>,?)
	DD __hemlock_main

ctab:
LABELTYPE <?arr (All[vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap] . (?hemcode vanswer vdep vdlis s1 s2 e1 e2))>
COERCE pack(<1>,?,<?arr (All[vanswer:T4 vdep:T4 vdlis:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap] . (?hemcode vanswer vdep vdlis s1 s2 e1 e2))>)
DD 1
DD ctab_data__8


	_end_TAL
	END

