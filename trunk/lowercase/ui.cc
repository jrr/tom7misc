
#include <string>
#include <vector>
#include <shared_mutex>
#include <cstdint>
#include <unordered_set>
#include <unordered_map>
#include <utility>

#include "../cc-lib/threadutil.h"
#include "../cc-lib/randutil.h"
#include "../cc-lib/arcfour.h"
#include "../cc-lib/base/logging.h"
#include "../cc-lib/base/stringprintf.h"

#include "timer.h"

#include "SDL.h"
#include "SDL_main.h"
#include "../cc-lib/sdl/sdlutil.h"
#include "../cc-lib/sdl/font.h"
#include "../cc-lib/stb_truetype.h"
#include "../cc-lib/image.h"
#include "../cc-lib/util.h"
#include "../cc-lib/lines.h"

#include "ttf.h"

#define FONTCHARS " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`-=[]\\;',./~!@#$%^&*()_+{}|:\"<>?" /* removed icons */
#define FONTSTYLES 7

using namespace std;

using int64 = int64_t;

#define FONTWIDTH 9
#define FONTHEIGHT 16
static Font *font = nullptr;
#define SCREENW 1920
#define SCREENH 1280
static SDL_Surface *screen = nullptr;

enum class Mode {
  BITMAP,
  SORTITION,
};


namespace {
struct FontSet {
  explicit FontSet(const string &filename) : filename(filename) {
    for (const string &s : Util::ReadFileToLines(filename)) {
      files.insert(s);
    }
    printf("%s: %lld\n", filename.c_str(), (int64)files.size());
  }

  void Save() {
    vector<string> sorted;
    sorted.reserve(files.size());
    for (const string &f : files)
      sorted.push_back(f);
    std::sort(sorted.begin(), sorted.end());
    Util::WriteLinesToFile(filename, sorted);
  }

  bool Has(const string &f) const {
    return files.find(f) != files.end();
  }
  
  const string filename;
  std::unordered_set<string> files;
};

static constexpr int WINDOW = 10;

struct UI {
  Mode mode = Mode::SORTITION;
  bool ui_dirty = true;

  // Good clean fonts.
  FontSet sans{"sans.txt"};
  FontSet serif{"serif.txt"};
  FontSet cursive{"cursive.txt"};

  // Probably not useful
  FontSet dingbats{"dingbats.txt"};
  FontSet broken{"broken.txt"};

  // Fonts not in any above set (upon loading this
  // instance).
  vector<string> unsorted_filenames;

  // Pointers to the above.
  vector<const FontSet *> fontsets;
  
  UI();
  void Loop();
  void Draw();

  // current index (into unsorted_filenames, fonts, etc.) that we act
  // on with keypresses etc.
  int cur = 0;
  
  // Parallel to unsorted_filenames, but not usually
  // as long. Use GetFont(idx).
  vector<TTF *> fonts;

  TTF *GetFont(int idx) {
    CHECK(idx < unsorted_filenames.size());
    while (idx >= fonts.size())
      fonts.push_back(nullptr);

    if (fonts[idx] == nullptr) {
      printf("Load %s...\n", unsorted_filenames[idx].c_str());
      fflush(stdout);
      fonts[idx] = new TTF(unsorted_filenames[idx]);
    }

    return fonts[idx];
  }
  
  // XXX
  char current_char = 'a';
  TTF times{"times.ttf"};
};
}  // namespace

UI::UI() {
  int64 sorted = 0;
  // This file generated by cleandb.exe
  for (const string &file : Util::ReadFileToLines("all_fonts.txt")) {
    bool has = false;
    for (const FontSet *fs : fontsets) {
      has = has || fs->Has(file);
    }
    if (!has) {
      unsorted_filenames.push_back(file);
    }
  }

  // XXX randomize order
  
  printf("Sorted fonts: %d\n"
         "Unsorted fonts: %d\n", sorted, (int64)unsorted_filenames.size());
}

void UI::Loop() {
  Mode mode = Mode::SORTITION;
  
  int mousex = 0, mousey = 0;
  (void)mousex; (void)mousey;
  for (;;) {

    SDL_Event event;
    if (SDL_PollEvent(&event)) {
      switch (event.type) {
      case SDL_QUIT:
	printf("QUIT.\n");
	return;

      case SDL_MOUSEMOTION: {
	SDL_MouseMotionEvent *e = (SDL_MouseMotionEvent*)&event;

	mousex = e->x;
	mousey = e->y;

	// Do dragging...
	break;
      }

      case SDL_KEYDOWN: {
	switch (event.key.keysym.sym) {
	case SDLK_ESCAPE:
	  printf("ESCAPE.\n");
	  return;
	case SDLK_LEFT:
	  if (current_char > ' ') current_char--;
	  ui_dirty = true;
	  break;
	case SDLK_RIGHT:
	  if (current_char < '~') current_char++;
	  ui_dirty = true;
	  break;

	  // Sortition mode...
	  
	case SDLK_DOWN:
	  cur++;
	  if (cur >= unsorted_filenames.size())
	    cur = unsorted_filenames.size() - 1;
	  ui_dirty = true;
	  break;

	case SDLK_UP:
	  cur--;
	  if (cur < 0) cur = 0;
	  ui_dirty = true;
	  break;
	  
	default:;
	}
      }

      case SDL_MOUSEBUTTONDOWN: {
	// LMB/RMB, drag, etc.
	if (mode == Mode::BITMAP) {
	  // ...
	}
	break;
      }

      default:;
      }
    }

    if (ui_dirty) {
      sdlutil::clearsurface(screen, 0xFFFFFFFF);
      Draw();
      SDL_Flip(screen);
      ui_dirty = false;
    }
  }
  
}

// scale is basically the height in pixels
// returns the pixel width to advance, with kerning if nc != 0
int DrawChar(TTF *ttf, int sx, int sy, float scale, char c, char nc) {
  vector<TTF::Contour> contours = ttf->GetContours(c);
    
  auto Line = [&](float x1, float y1, float x2, float y2, uint32 color) {
      sdlutil::drawclipline(screen,
			    sx + x1 * scale, sy + y1 * scale,
			    sx + x2 * scale, sy + y2 * scale,
			    0xFF & (color >> 24),
			    0xFF & (color >> 16),
			    0xFF & (color >> 8));
    };

  // One screen pixel in normalized coordinates.
  const double sqerr = 1.0f / (scale * scale);

  for (const auto &contour : contours) {
    auto [x, y] = ttf->Norm(contour.startx, contour.starty);
    for (const auto &p : contour.paths) {
      switch (p.type) {
      case TTF::PathType::LINE: {
	auto [px, py] = ttf->Norm(p.x, p.y);
	Line(x, y, px, py, 0x000000FF);
	x = px;
	y = py;
	break;
      }
      case TTF::PathType::BEZIER: {
	auto [cx, cy] = ttf->Norm(p.cx, p.cy);
	auto [px, py] = ttf->Norm(p.x, p.y);
	for (const auto [xx, yy] : 
	       TesselateQuadraticBezier<double>(x, y, cx, cy, px, py, sqerr)) {
	  Line(x, y, xx, yy, 0xFF0000FF);
	  x = xx;
	  y = yy;
	}
	break;
      }
      }
    }
  }

  return scale * ttf->NormKernAdvance(c, nc);
}


// Returns the (nominal) height used.
static int DrawString(TTF *ttf, int sx, int sy, float scale, const string &str) {
  for (int i = 0; i < str.size(); i++) {
    sx += DrawChar(ttf, sx, sy, scale, str[i], str[i + 1]);
  }
  return ttf->NormLineHeight() * scale;
}

// Returns the (nominal) height used.
static int DrawAlphabet(TTF *ttf, int sx, int sy, float scale) {
  int h = DrawString(ttf, sx, sy, scale,      "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  int h2 = DrawString(ttf, sx, sy + h, scale, "abcdefghijklmnopqrstuvwxyz");
  return h + h2;
}


void UI::Draw() {
  font->draw(2, 2, "hi");

  switch (mode) {
  case Mode::SORTITION: {

    int xpos = 64;
    int ypos = 64;
    int scale = 100;
    for (int i = cur - 2; i < cur + WINDOW - 2; i++) {
      // Can be out of bounds, especially at the beginning...
      if (i >= 0 && i < unsorted_filenames.size()) {
	const string &ff = unsorted_filenames[i];
	int slash = ff.rfind("\\");
	string name = (slash == string::npos) ? ff : ff.substr(slash + 1, string::npos);
	font->draw(xpos, ypos, name);
	ypos += font->height + 1;
	
	ypos += DrawAlphabet(GetFont(i), xpos, ypos, scale);
	ypos += 2;
	sdlutil::drawclipline(screen, xpos, ypos, SCREENW - 128, ypos,
			      0xAA, 0xAA, 0xAA);
	ypos += 2;
      } else {
	sdlutil::drawbox(screen, xpos, ypos, SCREENW - 128, 60,
			 0x77, 0x77, 0x77);
	ypos += 64;
      }
    }
      
    break;
  }    
  case Mode::BITMAP: {

    vector<TTF::Contour> contours = times.GetContours(current_char);

    constexpr int XPOS = 128;
    constexpr int YPOS = 48;
    // Basically, the height of the font in pixels.
    constexpr int SCALE = 1000;
    auto Line = [&](float x1, float y1, float x2, float y2, uint32 color) {
	sdlutil::drawclipline(screen,
			      XPOS + x1 * SCALE, YPOS + y1 * SCALE,
			      XPOS + x2 * SCALE, YPOS + y2 * SCALE,
			      0xFF & (color >> 24),
			      0xFF & (color >> 16),
			      0xFF & (color >> 8));
      };

    // One screen pixel in normalized coordinates.
    double sqerr = 1.0f / (SCALE * SCALE);
    
    for (const auto &contour : contours) {
      auto [x, y] = times.Norm(contour.startx, contour.starty);
      printf("Contour:\n"
	     "start %d,%d (norm %.4f %.4f)\n", contour.startx, contour.starty,
	     x, y);
      for (const auto &p : contour.paths) {
	switch (p.type) {
	case TTF::PathType::LINE: {
	  // printf("  lineto %d,%d\n", p.x, p.y);
	  auto [px, py] = times.Norm(p.x, p.y);
	  Line(x, y, px, py, 0x000000FF);
	  x = px;
	  y = py;
	  break;
	}
	case TTF::PathType::BEZIER: {
	  // printf("  bezier %d,%d (%d, %d)\n", p.x, p.y, p.cx, p.cy);
	  auto [cx, cy] = times.Norm(p.cx, p.cy);
	  auto [px, py] = times.Norm(p.x, p.y);
	  // Line(x, y, cx, cy, 0x00FF00FF);
	  // Line(cx, cy, px, py, 0x0000FFFF);

	  for (const auto [xx, yy] : 
		 TesselateQuadraticBezier<double>(x, y, cx, cy, px, py, sqerr)) {
	    // times.Norm(1, 1.0f / 1000.0f).second)) {
	    Line(x, y, xx, yy, 0xFF0000FF);
	    x = xx;
	    y = yy;
	  }
	  break;
	}
	}
      }
    }
    
    break;
  }
  }
      
  // Always draw output...
  
}

      
int main(int argc, char **argv) {

  // XXX This is specific to my machine. You probably want to remove it.
  // Assumes that processors 0-16 are available.
  // CHECK(SetProcessAffinityMask(GetCurrentProcess(), 0xF));

  /*
  if (!SetPriorityClass(GetCurrentProcess(), BELOW_NORMAL_PRIORITY_CLASS)) {
    LOG(FATAL) << "Unable to go to BELOW_NORMAL priority.\n";
  }
  */

  /* Initialize SDL and network, if we're using it. */
  CHECK(SDL_Init(SDL_INIT_VIDEO |
		 SDL_INIT_TIMER |
		 SDL_INIT_AUDIO) >= 0);
  fprintf(stderr, "SDL initialized OK.\n");

  SDL_EnableKeyRepeat(SDL_DEFAULT_REPEAT_DELAY,
                      SDL_DEFAULT_REPEAT_INTERVAL);

  SDL_EnableUNICODE(1);

  SDL_Surface *icon = SDL_LoadBMP("lowercase-icon.bmp");
  if (icon != nullptr) {
    SDL_WM_SetIcon(icon, nullptr);
  }
  
  screen = sdlutil::makescreen(SCREENW, SCREENH);
  CHECK(screen);

  font = Font::create(screen,
		      "font.png",
		      FONTCHARS,
		      FONTWIDTH, FONTHEIGHT, FONTSTYLES, 1, 3);
  CHECK(font != nullptr) << "Couldn't load font.";

  UI ui;
  ui.Loop();
  
  SDL_Quit();
  return 0;
}

