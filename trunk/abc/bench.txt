ASCII-only load_ax16. First attempt:
  Total bytes: 287248 (avg 4.38)
use INC, DEC:
  Total bytes: 268848 (avg 4.10)
also use AND:
  Total bytes: 231810 (avg 3.54)
don't wrap around INC:
  Total bytes: 231822 (avg 3.54)
bug fix (shoudln't change length):
  Total bytes: 231822 (avg 3.54)

There are still lots of really bad sequences...



357 bytes for EXE HEADER program (non-ascii)

ASCII version (other than INTs)
# of code bytes: 415

Use existing correct value of AH:
# of code bytes: 224

Implemented some known 16-to-16 ops, making it worse!:
# of code bytes: 229


before Machine rewrite:
WriteTest.writeexe();
# of code bytes: 320


after machine rewrite:
Total bytes: 231822 (avg 3.54)  (ok good)


after Machine rewrite:
# of code bytes: 300    :)

... I'm also not using any 16-bit tricks in there.

with 16-bit tricks:
# of code bytes: 285

Claim registers:
# of code bytes: 336


new byte table approach; just inc, dec, xor:
Total byte table size (opcode bytes): 269048
and with and:
Total byte table size (opcode bytes): 231000
and with sub:
Total byte table size (opcode bytes): 170479
.. very nice! :)

why does the tactics_test benchmark produce
slightly larger code? (oh it does load_ax16)
Total bytes: 174142 (avg 2.66)

With code table,
# of code bytes: 300

Multistrategy load_ax16_known: 295

before push_imm: 170479, 295

multistrategy load_ax16: 293
with push_imm: 284

with bytewise_hint: 283

use 8-bit immediate push: 280

