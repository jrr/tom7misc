
 ** Compiling Escape **

In August 2016 I rewrote the build process to use all free tools and
modern C++, and committed to 64 bits on OS X, Linux, and Windows.
If you want to compile with an old compiler, Visual Studio, Mac OS
10.2, or for a 32-bit platform, you can take a look at svn revision
2869 and good luck!


The basic approach to compiling is to set an environment variable
selecting your platform, i.e., one of:
  export OSX=true
  export WIN32=true
  export LINUX=true
and then just type
  make

You need "cc-lib", which is just a directory of library code used by
this and other projects. It just needs to sit in a directory next to
the one with the escape source code; escape's makefile manages to
compile the .cc files in there.

Beware that Escape has been around forever, so it may predate
"obvious" better ways to do things. For example, it uses the venerable
SDL 1.2 rather than the 2.0 series.

Executables have ".exe" suffix even on linux and OS X, even though
I know this is unusual for these platforms. But think about it.

Note that not all platforms have makefiles for the "meta" tools that
generate packed animations, etc. But the generated files are part of
the source distribution, and it shouldn't be too hard to get these
tools to build.

If you don't want to install the sound libraries, you can compile with
-DNOSOUND to disable it. There's no sound yet, so this might be a good
idea. (Some platforms currently force this.)


Platform specific notes:

 ** OS X **

On OS X, the required Frameworks are part of the source distribution.
You may need to:
  - Install XCode command-line tools, so that the makefile can run
    compilers (indeed, to run make itself)
  - Type "make framelinks" to make some symlinks inside of the
    Frameworks dir
  - Make a symlink from SDL OSX_build/Frameworks/SDL.framework/Versions/A/Headers
    because some other SDL libraries expect to be able to include
    SDL headers as "SDL/SDL_endian.h" etc.

The command "make desktop" makes Escape.app and puts it on the desktop;
this is how I usually develop there.

 ** Linux **

Linux is very easy. If you don't have 'make' and GCC already, god help you.
Otherwise, you may need to install SDL, SDL_net, and SDL_mixer; on Ubuntu:
  - sudo apt-get install libsdl1.2-dev
  - sudo apt-get install libsdl-net1.2-dev
  - sudo apt-get install libsdl-mixer1.2-dev
  
SDL is working if the command "sdl-config" is in your path.

After this, "export LINUX=true" and "make" should just work.

 ** Windows **

Visual Studio is no longer supported. You can try at revision 2869, but
why? I use mingw, and specifically the TDM-GCC compiler, producing
native 64-bit with free tools.

Managing libraries like SDL on win32 is a nightmare because there are
multiple different standards for where they should go, what object file
formats should be used, compilers, and so on. I finally gave up on trying
to build these as shared libraries, and am having a much better experience
just linking against .o files that I compile from source. You don't even
need to deal with nor distribute dlls this way, saving your users some
pain, too.

Get SDL, SDL_net, and SDL_mixer from libsdl.org. You want the 1.2 versions,
and the source code (NOT "runtime libraries" nor "development libraries";
there will be no libraries because the source code just gets compiled into
Escape). These contain directories like "SDL-1.2.15". Put these in the
escape source directory but rename them to SDL, SDL_net, and SDL_mixer (no
version numbers).

If all is well, you should be able to just "export WIN32=true" and
"make". It's possible that I'm skipping an important step about how to
install mingw itself, but I don't remember how to do this. I think I
am using one of (?!) the 64-bit versions offered within 64-bit cygwin,
and then running a 64-bit cygwin bash shell, but I'm not sure. Be very
cautious about buying into anything you see on the net; there are so
many traps.


 ** Understanding the code **

There is no design document yet, because there are several things
that I expect to change. Basically, start in main.cc and follow
things from there...

See the document protocol.txt for an explanation of the network
update features.

Here are some quirks to my C++ style, that might be good to know:


I don't use exceptions, because they are typically unportable, affect
performance throughout the code, and their semantics are inscrutible.
Therefore I sometimes avoid constructors, because there is no way for
a constructor to "fail" in C++ aside from exceptions. Instead, a static
"create" method returns a new-ly allocated pointer or nullptr on failure.

I used to have explicit destroy() methods instead of destructors, but
there's no real reason to do this, so I should replace those with standard
C++ destructors.

"auto" scope is sometimes useful when there are many exits from a
block. However, it is inflexible because you cannot return the address
of an auto object. The "extent" template creates an auto object that
will destroy some other object (by calling its destroy method) when it
goes out of scope. However, the target object can be "released" so
that its address may be returned. In extent.h there are also templates
for extents on objects that use destructors and arrays of objects that
use destructors. Since Escape was first written, the STL has added a
unique_ptr<T> class which does basically the same thing. I should replace
all the Extent instances with this.

Because what I really want are SML's signatures and structures, I
treat header files like signatures and cc files like structures. For
instance, http.h describes an abstract interface by only specifying
virtual functions and a static constructor, and the actual
implementation in http.cc creates a class called httpreal, deriving
from http so that it can hide all the implementation details -- not
just by using 'private,' but, you really don't need to see them at all
in the header.

When programming this way, gcc gives some really confusing error
messages. For instance, if you have a function that is not implemented
by the deriving class, you will get a bunch of missing vtable errors,
talking about not-in-charge-this and in-charge-that. Very weird. On
the other hand, it makes it much easier to manage the code once you get
it to compile. ;)

Because what I really want is Java's interfaces, I may use multiple
inheritance. But at most one (and probably none) of the parent classes
will be ever be concrete.


 ** Code history **

On 18 Dec 2009 I moved all of the source code and data from CVS at
Sourceforge to SVN at Sourceforge, still in the tom7misc project. I
did not preserve history, so if you want to do an archaeological diff,
you'll have to look there.

In August 2016 (>= r2870), I deleted a bunch of old build stuff and
commited to modern C++, 64-bit compiles, and removed external
dependencies like libpng. If you want to compile some old way, this
is where to look. But why?


 ** Things to know **

  * Fonts *

The characters in the font are fixed width, but are drawn with
an overlap. If AB is drawn, then the first column of pixels in B
will be drawn over the last column of pixels in A. For multi-character
glyphs (ie, the long checkmark), you'll want to account for this. See
the font graphic for an example. One non-obvious consequence is that
even if you simply duplicate the last column of pixels in the next
character, alpha-transparent pixels will be drawn twice, doubling
their opacity.

The characters are all defined in chars.h. Always use this instead
of giving color and glyph codes directly.

