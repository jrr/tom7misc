// Generated file! Do not edit.
#line 1 "guitar-head.cc"

// Note: In guitar.cc, this file is assembled from guitar-head.cc,
// guitar-tail.cc, and some data generated by gencc.cc. Don't edit
// guitar.cc directly.

#include "guitar.h"

#include <string>
#include <vector>
#include <string_view>
#include <array>
#include <optional>
#include <unordered_map>

#include "util.h"
#include "base/logging.h"

using namespace std;

#line 1 "(generated)"
[[maybe_unused]] static constexpr int RADIX = 66; [[maybe_unused]] static int CharNum(char c) { if (c >= ',' && c <= '9') return c - ','; if (c >= 'A' && c <= 'Z') return (c - 'A') + 14; if (c >= 'a' && c <= 'z') return (c - 'a') + 14 + 26; return -1; }
static constexpr char DATA[] = "8,f,0,0/-.-,02220,,2225577655-0,0.-.00022105322,,577555.0,0.,./,0121,53,54,,,78,8/0,,././,01/1/5,454,,,787800,0--.0,0--000022005,-45510,00-..00223055,-3557775520,000..002030,,223357575530,0/22/,0122-,,7645,,78A940,0/..,,0322,54322,,,76655/57,,,,,02,,,577,,,60,0//.-,022225,465,5,767570,0//00,0--22544455,7767780,0/0.-,02020,,222357565590,,/0./,0102,5,564-,,7889b/00/0,,0./-.-002020A0,0/0,1,030215,566-,,7A89B1-0/-0-00/000545455575457,,7687C0,0/00/,0100-5454455656,7D0,0/001,0-02132322354546,E0,0/0/05453,,5,5656,,7686F0,0/01,,0201-575658,,7688G0,0/0..,0002054--33555655H0,0/00/,01020545445,,7889I0,0/022000022544453575675J000/---002120,,2224,,7999K0,0/1-/,0112,546644,,7899L0,0/.--,0312-5432--5876--M0,0----00/10,2222245,6657N0,0/--.,00---546-3-556655O0,0//-.,00122544454556675P0,0./.0,02,125,4555577575R0,0.01,002010,,2213575555S0,0101,,,1213567585,,7888T0,0.000,0-010,35455575557Q0,0./00,0--125344,,,77577U0,0.00.,00010535433555557V0,0.--,002110576555,,7998W0,0,11/,0111,5665,5,,7898X0,0.10,,0-11053,4-5576557Y0,0.--.000110556557,,7798Z0,0/-0-,0--0-54--5-,,7657a0,0.-00,0-21053-455,,7557c/-0/-.--0/-.0,42255d/,,0-.-.0/-.-,,0220f/00/-.-00222000/22,-b,0,10./.113331653336688766-0,1/./,1133216433,6688666.0,1/,/0,1232,64,65,,,89,9/0,,/0/0,120206,565,,,89890011331163356,688,68888AB810,11./,1133416,334668886620,111//113141,,,34468686630,10-/.,12-30,1233,,,875640,111//11314165433,6,87765/68,,,,,13,,,688,,,60,100/,,133336553336,878670,1.0/.,10011655566,,878880,101/,,1313165333468676690,10--.,1213,6,675,,,9AABA0,10/-.,14132654,-46,677,B01101116565,,686768,,8798C/,1011065655667,7-8D0,101126545-,65657,696768E0,10101,1-1346564-,,,6767F0,101/-,1012,,56666686769G0,10--1,12131656556676766H0,0/--0,12131656556676766I0,100-/111133655564666788J0,10...113231,,,3356,776,K0,10230,1223,657755,,89AAL0.10/..,1423,,,8775,,8BAAM0,1....,1021,657565,,87A8N0,102//11123165,,45667766O0,1.0..,11233655565667786P0,1/0/1,,33236,566,688686R0,13121,,3324686666,,8A99S0,1212,,,23246,665,,,8999T0,1/111,33324,46566686668Q0,1.0/-,1/01,6455,-,88688U0,1/1//646544666668,,8899V0,1/..,113221687666,88AA9W0,1/-.-,1222,6776,6,,89A9X0,1....,1/21-11321-687668Y0,1/21/111221667668,,88A9Z0,10.1.,10,1165,56,,,8768a0,1/.1,,1331-64,56-,,8668.g,0,,-/0/,21/0/,24442799877-0,,-/0.224432,5443,799777.0,,-.,.,20,01,2343,75,76,/0,,-.-.,23131,5-76478979700,,-/0-,,//02224422,4447710,,-/00,2--0222445279997720,,-/.0,2220,22425279797730,,-.0/,21,01,2344,,8-86740,,-00/,2100,76544,7,988,5/79,,,,,24,,,799,,,60,,-/-/,2110,,2444446447470,21/--,21122766677,9989980,,-/./,2120,22424279787790,,-../,,1201,2324,7,786,A0,,-0./,212,3,252437,788,B0221222,4-44576767,797879C0,21221,2324-7676677878,9D0,21223,4-24376768,7,788-E0,,-21/,21212,3-2427675,,F0,2123,---745,5444579787AG0,,--./,21200,22242,64455H0,,-../,21221,6-465767667I0,,-1./22224476-6-57,789,J0,,.///,21///224342,,4446K0,,-.//,2334,7688667888,7L0,,-0///210//,2-343,,-886M0,2////,2131,,6-6467,8879N0,,--//222342,6-456778877O0,,-1//,211/-,22344766676P0,,-/-.,20102,24,347,6777R0,,-/..,24232,,4435797777S0,,-...,20201,2323,,5-765T0.--/.-,20222,2423-797779Q0,20/--,2012-,4-434,99799U0,,....,20220757655777779V0,,-//.,20//-224332798777W0,,-./.12333,,2333,7887,7X0,2032-,4-332,5-676798779Y0,,--/.,20320222442778779Z0,21/2/,2444-,,-647,,9879a0,20/0-,20/2,,2443-,,9779e//--/0//21/0/,,1/02h/,--/0/22444222144,i/,.-/0/,.1/0/32444,j/,/-/0/,/1/0/,/1/02k/,0-/0/,01/0/52444,/b,0,,.010,32010,35553,,5558-0,,.01/,,101/3355438AA888.0,,./,/,31,12,3454,86,87,/0,,././,34242,,45458,787,00...01.33553385578,8AA,8A10,,.011335563,,556,8AAA8820,,.0/1,333113353638A8A8830,,./10,32-12,34-5,87,97840,,2110,3211,87655,8,A99,5/8A,,,,,35,,,8AA,,,60,,.0.0,3221,,355558,798,70,,.-..,00010,3223387778880,,.0/0,35353,,55568A898890,,.//0,,2312,343538,897,A0,,.1/0,36354878--68,899,B0,,.-/.,323338787,,8A898AC0,32332,34-368787788989,AD0010110,3233487,7-687879,E0,,.-/-,32323,3535-8786,,F0,,.-//,3234,,655568788,,G0..../0,32311333353888988H0,,.//0,32332,3435,878778I0,32355333355877-668889AAJ0,..000,32000335453,,5557K0,,./00,344538799778999,8L0032100,324,4,3645,8,9998M0,30000,3243,,55557,,998AN0,,..00,32411333453889988O0,0.-0,,32200,33455877787P0,..0./,31213,,55458AA8A8R0,,.0//335343,,55468A8888S0,,.///,3434,,,45468,887,T0,31333,,5746,687888A888AQ0/,.0..,3123,867766,,A8AAU0,,..//,3133186876688888AV0,,.00/,3100,,354438A9888W0,,./0/23444,,3444,8998,8X0,3143,3654338697,,8A988AY0,...0/,3143133344388988AZ0,32030,32-3387,78,,,A98Aa0,,101.,3103,,31,33,,A88A0r,0-//.--,,/121,43121,46664-0-//----//120,466549766,,.0,,/0,0,42,23,4565,97,98,/0-./-/-,,/0/0,4535,9,898,00///12/446644-666--9BB,9B10-///---//122446674,,667-20-/-/--,44422446474,,667730-./.,,,,/021-43,23-4566-40-0/..-,4322,,4766,98766-509B,,,,,46,,,9BB,,,-//,,,60-//./-.//1/1,4332,,4666670-//.//,43344,66666-8889980-/-.--,4342,446464,,666790-.-.0-,,/001,,3423,4546,A0-0-..-,,/201,474659,9AA,B0-/-.-/1,/10/443444-66667C0-./.0/-21001,43443-6546-D0-0-.0/-21221,43445-67667E0-/-.-.-2-131,434349897,,F0-/-.-0-2--01,4345,-76667G0---.----1101,43422,44464H0-.-.---2-021,43443989889I0-/-./----.//-2332-444466J0-/..--,,/111,43111446564K0-...1-,,/011,4556,-8AA88L0-0/.11143211,4756,-87668M0-/..-/1//11/,4354,,,6868N0--..----3112444564-86678O0-/..//,43311,44566988898P0-//-/--//1/0,42324,,6656R1-//-0--/-----//100446454,,6657S0-./000,4545,,,56579,998,T0-/---/-//-0/,42444-79897Q0-//-//0,/1//,42344-7889-U0-----/--210-,42442979877V0-/.----//110,4211,446554W0-..-,-,,/01034555,,4555,X0-/.--/-,1110-7654-9BA99BY0--.--/,///10,42542444554Z0-//.-/,43141,43,44,,BA9Ba0,,0..0,5325,,53-35,57-65j/,//.--,//121446664m0,//---,//--0,//120446654l/,13121,13124686699o/,1/---,12124676999p/,,-.--,23121,2/121q/,,----,2212,,,9999r/,,..--,33121886699s/,,.---,3212,,3665,d/.//.--,,0.--,,0121e////.--,,1121///121f/0//.--0//121,,2121g0,,,.--1//.--1431211//12,u/,,0---.//---.//--0v////---///--0///120w/0//---0//--00//12-x/1//---14212,,,31201i,0.00/..,,0232,54232,57775-0.00...,,0231,57765A877,,.0,,01,1,53,34,5676,A8,A9,/0.,-.-.,,0101456464A,9A9,00.00,.0000230557755A779A,10.000..,,0233557785,,778,20.0.0..355533557585,,778830./0/-,,,01-2,5677,A9,B9A40,,0//.,5433,,5,776A9877,5/.0,,,,,57,,,.00,,,60.,0/0.,00202,5443,55777770.---..,,0/00,22232,5445580.0./..,00212557575,,777890.-./-.,,0112,,4534,5657,A0.-.//,,,0312,58576A9A,B,B0.0./.0,,0/10554555,77778C0.-.--.,54554,56-78A9A--AD0.-.-/.232332,54556A9A9B,E0.0././,,0/1/,54545A9A8,,F0.0./.1,,0/11,5456,,87778G0.../..000012,54533,55575H0.-.--.,,0112,54554,56575I0.0./0..../00,54577555577J0,,0/.-.0//..,00222557675K0.-//--,,0122,5667,A9BB99L0.-///-254322,5867,,,CBB9M0.-/-.-,,//.0,5465,,,7979N0..//..,,0022555675A9B-8-O0.---.-,,0/0-,54422,55677P0.,-...,,0201,53435,,7767R0.0....,,0211557565,,7768S0.,..-,,,0111,5656,A8AA-,T0.0...0,00-11,53555A8A-AAQ0.00.001,0200,5345,A89-A,U0.....0,,0011,53553A8A988V0.0/...,,0221557665,,CAA9W0.//.--,,012145666,,5666,X0.0/..0,,0-21,5365,A8,9A-Y0../..0,00021,53653555665Z0,,0/.0,,0-32,54252,54-55a0,,0..0,5325,,53-35,57-65k/,00/..,00232557775p.,24232,24235r/,,./..,34232,30232c/--0/..,,//..-00/..f/0-0/..000/,,000232h0,-0/..200/,,25423220023-n/,00...,00..15577652b,0/110//,11343365343668886-0/11///,11342,,4342668876.0/-,/.,,,12,2,64,45,6787,/0/,./.,/01/1/,,121256757500/,,.//111341668866B88AB,10/111//,11344668896,,889B20/1/1//,,1324,6664466869630,,10.//010,/,,1243,6788640,,100/,,100,,6544,BA988,5//1,,,,,68,,,/11,,,60/,.0/,/,101/,11313,6888870/...//,,1011,33343,6556680/1/0//,11323,6564,66868690/,/0.,,,1223,45645,6768-A0/,/00,,,1423,6544-,69687B0/1/0/1,,1021665666,88889C0/./..//./..-,01021,65665D0/./.0-,6546-,65667B,9A8-E0/./-/-,,1020,65656BAB9,,F0/./////1/0/2,,1022,6567,G0/./.--111123,65644,66686H0/./../,,1223,65665,67686I0//.0--///011,6554-666688J0/100//,11333,65333668786K0/.00..,,1233,65785,6778,L0/,000,365433,6978,,,988AM0/.0././,00/1,,103166576,N0//00//,,1133,657-6666786O0/.../.,31133,65533,66788P0/,.///,11312,64546,6857,R0/1////,,1322668676,,8879S0/-//.-,,1222,6767,,,7879T0/-/./-/1///1,64666,,8A79Q0/-..///11/11211311,6456,U0/-/.--/////1,,1122,64664V0/10///,11332,6433,668776W0/00/,/,,123256777,,6777,X0/-0././-0./,/10//1,6476,Y0//0//1,11132,64764666776Z0/.,.//,,10/1,65363,65,66a0,,1//1/11//1,6436,,64,663g,00/---0022100,,2454476454-00.--00022000,,2453779987.00.,0/,,,23,3,75,56,7898,/00.,0/-0,/0/-012020,,2323000---00222452,744577799771000--.0022200,224557799A72000....020200,777557797A7300/,-/0,,23-4,76--6,7899,400/.--,0,211,,,211,,7655,5/02,,,,,79,,,022,,,600/----0,/10,,22424,79999700-----0///00,22122,76677800/---.020100,22434779797900,01/,,,2334,767-6,7879,A00/.--.0,011,,,2534,7A798B00----.0/0/0,020102776777C00/0//00101-2,76776,98--AD00-.--.0/0/1,,76778,9A-9AE00/-.0.0,0101,,2131,76767F00/-0-.020133,22133,7678,G00/--..222234,76755,77797H00/0//0,,2334,76776,78797I00-/--.0,0122020120,76779J00/---/021100,22444,79897K00/11//0111,,,,2344,7889,L0,,.--/0,111,476544,7A89,M00----/0/1/0/,,1102,7687,N00/--./001100,,6-45777897O00///0/001120,76644,77899P00,/000022020,22423,75657R0020000,22433,75757779787S00,,0/.0,00/,,,2333,7878,T00--00.020002,,4-33,75777Q00.-/0-,22022322422,75677U00,00.,000002,,2244,75775V00.--0/021000,22443,79887W00110,0,,234367888,,7888,X00--00/021002,,4-43,7587,Y0001002,22243,75875777887Z00--/-0,,0/.1,76474,76-77a00.-/00,,2002,,4-53,7547,e///---0//--00,,1100j/,/--00,/---0,/2100p/,,---0,22100,22454c/-/--00-/---0,,/100d/./--00./---0,,01004b,010...,133211,33565587565-0133111,,3564,,656488AA98.01/,10,,,34,4,86,67,89A9,/0,,-.-.1,0101,,3434789797001,,011133,1333356388AA8810,,../1133311,3356688AAB820,,..//131311,8886688A8B830,,3201,,3465,87AA7,89AA,4010/..,1,322,,,322,,8766,5/13,,,,,8A,,,133,,,60,0....1,021,,33535,8776,70,.....100011,,3233,8778880,,.../131211,3354588A8A8901,120,,,3445,67867,898A,A01,122-,,3645,8786-,8B8A9B010101,131213,,3243887888C010-0,/1010011212,3,87887D0/./../10102-,,1223,8788-E0,-.../,,1212,,3242,87878F0101111131244,,3244,8789,G0111211333345,87866,888A8H01,120,,,3445,87887,898A8I01.0../131231111233,878AAJ0132211,33555,8796,88A9A8K01022001222,,333455,899A,L010/-.-102-2-587655,8B9A,M0,....010201013221388798,N010.-/,112211,,33558889A8O0100010112231,87755,889AAP01,011,133131,33534,86768R0131111,33544,8686,88A898S0,,-.-/1,110,,,3444,8989,T01...-/131113465564,86888Q01,0113133133433533,86788U01/10//111113,,3344,86886V0,/..10132111,33554,8A998W01221,1,,345478999,,8999,X01,20-1132113333554,8698,Y0112113,33354,86986888998Z010,01,,,3213,87585,87,88a01/,01,,,3113133113,8658,5n,0,-///-,////2244322,-4676-0,-//.-,//222244222,-4675.0,-./.,20,10,,,45,5,97,78/0,-././2,121,234242,-454500,-//--,-/1--444674,-66--10,-//0-,--,0-244422,4467720,-/-0-242422,-4657,9997730,-.//,,-4312,-8576,9ABB,40,-0//.210//,2,4332,9877,5/24,,,,,-/,,,244,,,60,-////2,132,24,342,9887,70,-11//211122,44344,9889980,-/-/-,.///0242322,-465690,-.//0,-2312,,4556,78978A0,-0-/.,-0//0,22332,,4756B021/---,-/1/0242324,98999C0,-.1/0212112,-6556,98998D0,-01/0210--2,-2334,989-AE0,-/0/0242323,,4353,98989F0242355,,4355,-7656,989A,G0,---/-21---0222322444456H0,-.-/-212112,,4556,98998I0,-/-//211-0-242342,989BBJ0,-/./-,.///1243322,-4666K0,-../1,-.//12333,,,-4566L0,-0./.,-0//1,-3332698766M0,-/1/121312-,-3324998A9,N0,--./-,--//1223324766666O0,-/.//211121,-3344,98866P0,-//./2,1222244242,44645R0,-/-.-,-//.0242222,44655S0,-.-.,2,221,234252,,4555T0,-/1.02422245-6-5-,97999Q0,-12--244244544644,97899U0,---.-202100222224,97997V0,-/..-243222,44665,9766,W0,-...12332,2,,456589AAA,X02031--,-32-1243224,-6665Y0,--..-223224,-4465,97A97Z0,-/1/-,,4324,98696,98,99a0,-/1.-,,4224,,46-5,9769,l/,1//22,1///2,14322c/--///-,44322,,///2d/.-///-,,0//-.1///,e//-///-/1//22/1///2f/0-///-,,232201//22g/11//2211///2,,3322n/,0//.-,0/222,0//22t/--//.--0//.-,44222u/.-//.-,,0/.-.0//.,v//-//.-,,1222/0/222w/,,22220-//.-00/222x.10/22210//226b,0,.000.32000,355433,55787-0,.00/.355333,,5333,,5786.0,./0/,31,32,,,56,6,A8,89/0,./-/-,,/0/0345353,,565600..00..30023,555785,A778A10,.001.,,0013355533,5578820,.0.1.,,0011353533,,576830,./00-34-42-34-4,3,,568740,.100,32100,,,5443,,544,5/35,,,,,.0,,,355,,,60,.000032--3335,453,A887,70,.--..322233,55455,A99AA80,.0.0.353433,55767,A9A8,90,./.0,3,342-,,5667,A9A8-A0,.1.0/3,344,,,5867,A9A,BB0,.-...32323,353435,A9AAAC0,.-..-3,-221323223,A9AA-D0,.-../10100132324,3,3445E0,.-.-.3231,,3,3434,A9A9AF0,.-./,353466,,5466,A9AB,G0,...0.321211555567,A9A88H0,.-..-32322,,,5667,A9AA9I0,.-.0032--11333455,A9ACCJ0,.0/0.,,0002354433,55777K0,.//0,3244223444,-,,5677L0,.-/0/,,10023,444,7A9877M0..-/.,30000232423,354435N0,../0.3,-212334433,,5577O0,../00322232334453,A9977P0,.0,/0,1203,3,2333355353R0,.0./.,,00/1353333,55766S0,././,,,/0/13,332,,,5666T0,,02/131,231353335,A8AA,Q03,23353,53556,5755,A89A,U0313211333335,,5566,A8AA8V0,.0//.354333,55776,A877,W0,.///-34,3223443,3,,5676X031,2323142,,354335555776Y0,..//.334335,55576,A8BA8Z0,.-0..,,5435,,54,5,A97A7a0,100.,31,23,,,5335,A87A,7b,0//111/,,1114466544,66898-0//110/466444,,6897,,9897.0,/-,-.,/010,42,43,,,67,7/0,/0.0.,,01014,343,45646400//11//4,,344666896,B889B10//112/,,1124466644,6689920,///--//1/2/,,112246464430,/011,,,65344565-,,,67-840,/.--,,,21104,655,,BA9995/46,,,,,/1,,,466,,,60,/..-,,/11114,656,,,686870,/..//433344,66566,B8A9880,/./-///1/1/,,111246454490,/./-.,/0/1,4,453,,,6778A0,/./-0,/2/104,455,,,6978B0,/.///411312464546,,6576C0,/.//.4343344545,6,BABBAD0,/.//021211243435,898998E0,/././4342,,4,4545,,6575F0,/./0,43-4-2464577,,6577G0,/./--////1/444544666678H0,/.//.,/0/1/4,453,,,6778I0,/./11////11413112444566J0//101/,,1113465544,66888K0,/001,4355334555-,,,6788L0,/.0-0,/201,435-5,8BA988M0//.0/,,,131343534,,,6586N0,/.0--///01/445546,,6688O0,//011433343445564,BAA88P0//-.-/,,11014,344,466464R0//1/0/,,1102464444,66877S0,/0/0,4,443,456474,,6777T0,/-///,11102464446798897Q0,/-.//,233444664667,6866U0,/-//-424322444446,,6677V0,/-0-///100/465444,66887W0,/000,45,4334554,4,,6787X0,/-0//4253-,465446,B9CB,Y0,/-0/-///00/445446,66687Z0,/.,//43,344,,6546,BA8B8a0,211/,42-34,,,6446,B98B,";
#line 1 "guitar-tail.cc"

// Note: In guitar.cc, this file is assembled from guitar-head.cc,
// guitar-tail.cc, and some data generated by gencc.cc. Don't edit
// guitar.cc directly.

#undef DEBUG_GUITAR

// Normalize the guitar chord name if possible.
// Sharps/flats on the base chord are rewritten to one of
// C#, Eb, F#, Ab, Bb.
static string NormalizeBase(string s) {
  if (Util::StartsWith(s, "Db")) {
    s[0] = 'C';
    s[1] = '#';
  } else if (Util::StartsWith(s, "D#")) {
    s[0] = 'E';
    s[1] = 'b';
  } else if (Util::StartsWith(s, "Gb")) {
    s[0] = 'F';
    s[1] = '#';
  } else if (Util::StartsWith(s, "G#")) {
    s[0] = 'A';
    s[1] = 'b';
  } else if (Util::StartsWith(s, "A#")) {
    s[0] = 'B';
    s[1] = 'b';
  }
  return s;
}

static inline Guitar::Chord ChordOfUnchecked(int base_num,
					     int suffix_num) {
  return (base_num << 8) | suffix_num;
}

static inline pair<int, int> UnChord(Guitar::Chord c) {
  const int base = (c >> 8) & 255;
  const int suf = c & 255;
  return make_pair(base, suf);
}

Guitar::Chord Guitar::ChordOf(int b, int s) {
  CHECK(b >= 0 && b < NUM_BASES) << b;
  CHECK(s >= 0 && s < NUM_SUFFIXES) << s;
  return ChordOfUnchecked(b, s);
}

static string NormalizeSuffix(const string &s) {
  if (s == "major" || s == "maj") return "";
  if (s == "minor" || s == "min") return "m";
  return s;
}

int Guitar::BaseNum(string_view base) {
  for (int i = 0; i < NUM_BASES; i++) {
    if (BASES[i] == base) return i;
  }
  return -1;
}

int Guitar::SuffixNum(string_view suffix) {
  for (int i = 0; i < NUM_SUFFIXES; i++) {
    if (SUFFIXES[i] == suffix) return i;
  }
  return -1;
}

std::string Guitar::ChordString(Chord c) {
  const auto [base, suf] = UnChord(c);
  CHECK(base >= 0 && base < Guitar::NUM_BASES) << "Invalid chord " << c;
  CHECK(suf >= 0 && suf < Guitar::NUM_SUFFIXES) << "Invalid chord " << suf;
  return (string)BASES[base] + (string)SUFFIXES[suf];
}

std::string Guitar::FingeringString(Fingering fing) {
  const auto [a, b, c, d, e, f] = fing;
  auto Char = [](int x) -> char {
      if (x < 0) return 'x';
      if (x <= 9) return '0' + x;
      return 'a' + (x - 10);
    };
  char ret[7];
  ret[0] = Char(a);
  ret[1] = Char(b);
  ret[2] = Char(c);
  ret[3] = Char(d);
  ret[4] = Char(e);
  ret[5] = Char(f);
  ret[6] = 0;
  return &ret[0];
}

std::optional<Guitar::Chord> Guitar::Parse(std::string_view sv) {
  string s = NormalizeBase((string)sv);

  // Longer matches have to come first here, since
  // we use a totally greedy strategy!
  for (string_view pfx : { "C#"sv, "C"sv, "D"sv, "Eb"sv,
	"E"sv, "F#"sv, "F"sv, "G"sv, "Ab"sv, "A"sv, "Bb"sv, "B"sv }) {
    if (Util::TryStripPrefix(pfx, &s)) {
      // Matched.
      const int base_num = BaseNum(pfx);
      s = NormalizeSuffix(s);
      const int suffix_num = SuffixNum(s);
      // Invalid. (Note: Shouldn't continue looping since we've modified s.)
      if (base_num < 0 || suffix_num < 0) return {};
      const Chord c = ChordOfUnchecked(base_num, suffix_num);
      return {c};
    }
  }
  
  // No match for base.
  return {};  
}

// int8_t packed into lowest 6 bytes.
using PackedFingering = uint64_t;
static constexpr Guitar::Fingering Unpack(PackedFingering pf) {
  return make_tuple((int)(int8_t)(255 & (pf >> (5 * 8))),
		    (int)(int8_t)(255 & (pf >> (4 * 8))),
		    (int)(int8_t)(255 & (pf >> (3 * 8))),
		    (int)(int8_t)(255 & (pf >> (2 * 8))),
		    (int)(int8_t)(255 & (pf >> (1 * 8))),
		    (int)(int8_t)(255 & (pf >> (0 * 8))));
}

static constexpr PackedFingering Pack(Guitar::Fingering f) {
  return
    ((255 & (uint64_t)(int8_t)(std::get<0>(f))) << (5 * 8)) |
    ((255 & (uint64_t)(int8_t)(std::get<1>(f))) << (4 * 8)) |
    ((255 & (uint64_t)(int8_t)(std::get<2>(f))) << (3 * 8)) |
    ((255 & (uint64_t)(int8_t)(std::get<3>(f))) << (2 * 8)) |
    ((255 & (uint64_t)(int8_t)(std::get<4>(f))) << (1 * 8)) |
    ((255 & (uint64_t)(int8_t)(std::get<5>(f))) << (0 * 8));
}

// Sanity check the above for -1 especially.
static_assert(Unpack(Pack(make_tuple(-1, 3, 2, -1, 1, 0))) ==
	      make_tuple(-1, 3, 2, -1, 1, 0));

namespace {
// Singleton parsed database. Depends on DATA symbol generated by
// gencc.
struct DB {
  DB() {
    data.resize(Guitar::NUM_BASES);
    int idx = 0;
    auto GetNum = [&idx]() { return CharNum(DATA[idx++]); };
    const int bases_in_data = GetNum();
    CHECK_EQ(bases_in_data, Guitar::NUM_BASES) << "Expected to be dense.";

    [[maybe_unused]] int ambiguous = 0;
    for (int b = 0; b < Guitar::NUM_BASES; b++) {
      // Not guaranteed to be in the same order.
      // This will be the index into the vector.
      const int base = GetNum();
      std::unordered_map<int, vector<PackedFingering>> &base_row = data[base];
      
      const int nsuf = GetNum();
      for (int s = 0; s < nsuf; s++) {
	// Suffix code (key into map).
	const int suffix = GetNum();
	vector<PackedFingering> &fingerings = base_row[suffix];

	const Guitar::Chord chord = ChordOfUnchecked(base, suffix);
	
	// Number of fingerings.
	const int nfing = GetNum();
	for (int f = 0; f < nfing; f++) {
	  // Each is encoded +1 so that -1 is nonnegative.
	  const int f0 = GetNum() - 1;
	  const int f1 = GetNum() - 1;
	  const int f2 = GetNum() - 1;
	  const int f3 = GetNum() - 1;
	  const int f4 = GetNum() - 1;
	  const int f5 = GetNum() - 1;
	  const Guitar::Fingering fingering =
	    make_tuple(f0, f1, f2, f3, f4, f5);
	  const PackedFingering pf = Pack(fingering);
	  fingerings.push_back(pf);
	  // There are some ambiguous fingerings in the upstream data, so we just
	  // keep the first one we saw.
	  [[maybe_unused]] bool inserted = rev.emplace(pf, chord).second;
	  #ifdef DEBUG_GUITAR
	  if (!inserted) {
	    ambiguous++;
	    /*
	    LOG(ERROR) <<
	    "duplicate fingering: " <<
	    Guitar::FingeringString(fingering) <<
	    "\nfor: " << Guitar::ChordString(chord) <<
	    "\nand existing: " << Guitar::ChordString(rev[pf]);
	    */
	    printf("%s for %s and %s\n",
		   Guitar::FingeringString(fingering).c_str(),
		   Guitar::ChordString(chord).c_str(),
		   Guitar::ChordString(rev[pf]).c_str());
	  }
	  #endif
	}
      }
    }
    #ifdef DEBUG_GUITAR
    printf("There are %d ambiguous fingerings!!\n", ambiguous);
    #endif
    
    // sizeof DATA includes nul terminating byte.
    CHECK_EQ(idx + 1, sizeof DATA) << (idx + 1) << " " << (sizeof DATA);
  }

  // Outer vector is base chords, dense.
  // Then suffix, then each known fingering.
  vector<std::unordered_map<int, vector<PackedFingering>>> data;
  // PERF: These data structures don't depend on each other, so
  // we could perhaps only load the one we need (for embedded
  // applications that only call GetFingerings xor NameFingering).
  std::unordered_map<PackedFingering, Guitar::Chord> rev;
};
}

static const DB *GetDB() {
  static const DB *db = new DB;
  return db;
}

std::vector<Guitar::Fingering> Guitar::GetFingerings(Chord c) {
  const DB &db = *GetDB();

  const auto [base, suf] = UnChord(c);
  CHECK(base >= 0 && base < Guitar::NUM_BASES) << "Invalid chord " << c;
  CHECK(suf >= 0 && suf < Guitar::NUM_SUFFIXES) << "Invalid chord " << suf;
  const auto &m = db.data[base];
  auto sit = m.find(suf);
  // No fingerings known.
  if (sit == m.end()) return {};
  // Convert to external representation.
  vector<Fingering> ret;
  ret.reserve(sit->second.size());
  for (const PackedFingering pf : sit->second)
    ret.push_back(Unpack(pf));
  return ret;
}

std::optional<Guitar::Chord> Guitar::NameFingering(Fingering f) {
  const DB &db = *GetDB();

  PackedFingering packed = Pack(f);
  auto it = db.rev.find(packed);
  if (it == db.rev.end()) return {};
  return {it->second};
}
