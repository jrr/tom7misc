
database escape =

  table site =
    (* there's just one *)
    key id

    (* id of graveyard collection *)
    val graveyard : int
  end

  table user =
    (* unique id *)
    key id

    (* sequence numbers are secret to the player,
       and stored in his player file. *)
    val seql : int
    val seqh : int

    (* time that this player registered *)
    val joindate : int

    (* can be anything *)
    val name : string
    val lasthost : string

    (* Trust levels:

       0: banned  (can't do anything)
       1: spurned (ratings don't count,
                   maximum of two uploads per day?)
       2: normal  (regular privileges 2001-2005)
       3: trusted (levels immune to auto-thin,
                   can vote to keep levels,
                   mark comments as spoilers,
                   ??)
       4: admin   (delete any level)
       *)
    val trust : int
  end

  table collection =
    key id

    val name : string
    val fname : string

    val minv : int
  end

  (* subdirectories of collections.
     a collection may have 0 or more
     of these *)
  table subdir =
    key id

    (* only the last dir in the path;
       never abc/def *)
    val fname : string
    val longidx : string

    val colof : int

    (* 0 if subdir of root.
       require subdir[n].colof = colof *)
    val parent : int
  end

  table level =
    key id

    (* md5 hash of level *)
    val md : string

    val title : string
    val author : string

    (* date *)
    val uploaded : int

    (* a player. *)
    val owner : int

    (* average ratings: as totals *)
    val nvotes : int
    val difficulty : int
    val style : int
    val rigidity : int

    (* totals *)
    val cooked : int
    val solved : int
  end

  (* put a level in a collection *)
  table levelrel =
    key id

    val col : int
    val subdir : int
    val lev : int
  end

  (* ratings and comments on levels *)
  table lrating =
    key id
    (* level *)
    val of : int
    (* user  *)
    val byuser : int

    (* rating stuff ...
       should range 0..10 inclusive. *)
    val difficulty : int
    val style : int
    val rigidity : int

    val solved : bool

    (* false also if not solved *)
    val cooked : bool
  end

  table lcomment =
    key id
    (* level *)
    val of : int
    (* user *)
    val byuser : int

    val date : int

    val spoiler : bool
    (* is this an 'info only' comment? *)
    val info : bool

    (* the comment ... *)
    val comment : blob
  end

  table solution =
    key id

    (* level *)
    val of : int

    val name : string
    val author : string
    val date : int

    (* as ascii *)
    val md5 : string

    (* as base64 data *)
    val moves : blob
    val len : int

    (* if this is set, then this
       is just an attempt at the
       speed record. anything better
       can replace it. *)
    val speedrecord : bool
  end

  (* Generated summary posts. Each of these is displayed
     straightforwardly by summaryrss. *)
  table summarypost =
    key id
    (* as HTML *)
    val title : blob
    val date : int
    (* as HTML *)
    val description : blob
  end

end